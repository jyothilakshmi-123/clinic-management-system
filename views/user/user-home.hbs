<header>
    <nav class="navbar navbar-expand-lg navbar-light bg-white ">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01"
            aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
            {{!-- <a class="navbar-brand  font-weight-bold text-white bg-success" data-toggle="tab" href="#">Doctor</a>
            --}}
            <div class="container-fluid">
                <ul class="nav nav-tabs nav-justified  ">
                    <li class="nav-item mr-1  active ">

                        <a href="/user-home" class="nav-link bg-info text-white tablinks "
                            onclick="user(event,'Appointments')" id="defaultOpen" data-toggle="tab">Appointments</a>
                    </li>
                    <li class="nav-item mr-1 active ">
                        <a href="/user-home" class="nav-link bg-info text-white tablinks"
                            onclick="user(event,'MyRequests')" data-toggle="tab">My Requests</a>
                    </li>
                    <li class="nav-item mr-1 active ">
                        <a href="/user-home" class="nav-link bg-info text-white tablinks"
                            onclick="user(event,'Results')" data-toggle="tab">Results</a>
                    </li>

                </ul>
            </div>
            {{!-- <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Link</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link disabled" href="#">Disabled</a>
                </li>
            </ul> --}}
            <div class="dropdown ml-auto  ">
                <button class="btn btn-secondary dropdown-toggle mr-5 " type="button" id="dropdownMenuButton"
                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    {{#if user}}
                    {{user.displayName}}
                    {{/if}}

                </button>
                <div class="dropdown-menu " aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="/">Home</a>
                    <a class="dropdown-item" href="/logout">Logout</a>


                </div>
            </div>
        </div>
    </nav>
</header>
<section>
    <div class="row ">
        <div class="col-md-2  ml-5 mb-5 text-center" style="background-color: lightblue; height: 350px;">
            {{#if user.imagePresent}}
            <img style="width: 130px;
                            height: 140px;
                            border-radius: 50%;" class=" mb-3 mt-5  " src="/user-images/{{user._id}}.jpg" alt="">
            {{else}}
            <img style="width: 130px;
                            height: 130px;
                            border-radius: 50%;" class=" mb-3 mt-5  " src="/user-images/default1.jpg" alt="">
            {{/if}}
            <h4 class="p-2">{{user.displayName}}</h4>
            <p class="text-dark"><small>{{user.userEmail}}</small></p>
            <div class="text-center">
                <a class="ml-5" href="/edit-user/{{user._id}}">
                    Edit Profile </a>
            </div>
        </div>

        <div class="col-md-9 bg-light border  ml-3 mb-5 " style=" ">
            <div class="tabcontent" id="Appointments">
                <div class="row">

                    {{#each confirmedAppointments}}
                    <div class="col-md-4 ">
                        <div class="card border-info  mb-3 mt-4  " style="border-radius: 10px; width:max-content;">
                            <div class="card-header ">
                                <img class=" float-left rounded-circle  border card-image "
                                    style="height: 80px; width: 80px;" src="/doctor-images/{{this.dr_id}}.jpg" alt="">
                                <h3 class="float-right mt-4 ml-1">{{this.drName}}</h3>
                            </div>
                            <div class="card-body ">

                                <p>Appointment Date : {{this.dateOfBooking}}</p>
                                <p>Appointment Time : {{this.timeOfBooking}}</p>
                                <p>Booking For : {{this.displayName}}</p>
                                {{!-- <button type="button" class="  mt-3 mb-3 p-2"
                                    style="background-color:  #3efc8a; color: white;  border-radius: 30px; border: 1px;">Make
                                    an Appointment</button> --}}
                            </div>

                            <div class="card-footer">
                                <p class="float-left">confirmed</p>
                                <a class="float-right" href="#"
                                    onclick="canceledAppointments('{{this._id}}')">cancel</a>
                            </div>



                        </div>
                    </div>
                    {{/each}}
                </div>


            </div>
            <div class="tabcontent" id="MyRequests">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a href="#myPendingRequests" class=" nav-link  mr-4" role="tab" data-toggle="tab">My
                            Pending Requests</a>
                    </li>
                    <li class="nav-item">
                        <a href="#myCancelledRequests" class="nav-link    mr-4" role="tab" data-toggle="tab">My
                            Cancelled Requests</a>
                    </li>

                </ul>


                <div class="tab-content">
                    <div class="tab-pane active container" role="tabpanel" id="myPendingRequests">
                        <div class="row">
                            {{#each pendingAppointments}}



                            <div class="col-md-4 ">
                                <div class="card border-info  mb-3 mt-4  "
                                    style="border-radius: 10px; width:max-content;">
                                    <div class="card-header ">
                                        <img class=" float-left rounded-circle  border card-image "
                                            style="height: 80px; width: 80px;" src="/doctor-images/{{this.dr_id}}.jpg"
                                            alt="">
                                        <h3 class="float-right mt-4 ml-1">{{this.drName}}</h3>
                                    </div>
                                    <div class="card-body ">

                                        <p>Appointment Date : {{this.dateOfBooking}}</p>
                                        <p>Appointment Time : {{this.timeOfBooking}}</p>
                                        <p>Booking For : {{this.displayName}}</p>
                                        {{!-- <button type="button" class="  mt-3 mb-3 p-2"
                                            style="background-color:  #3efc8a; color: white;  border-radius: 30px; border: 1px;">Make
                                            an Appointment</button> --}}
                                    </div>

                                    <div class="card-footer">
                                        <p class="float-left">Pending...</p>
                                        <a class="float-right" href="/make-appointment/{{this.dr_id}}"
                                            onclick="retryAppointments('{{this._id}}')">Retry Booking</a>
                                    </div>
                                </div>


                            </div>
                            {{/each}}
                        </div>
                    </div>

                    <div class="tab-pane container" role="tabpanel" id="myCancelledRequests">
                        <div class="row ">
                            {{#each cancelledAppointments}}
                            <div class="col-md-4 ">
                                <div class="card border-info  mb-3 mt-4  "
                                    style="border-radius: 10px; width:max-content;">
                                    <div class="card-header ">
                                        <img class=" float-left rounded-circle  border card-image "
                                            style="height: 80px; width: 80px;" src="/doctor-images/{{this.dr_id}}.jpg"
                                            alt="">
                                        <h3 class="float-right mt-4 ml-1">{{this.drName}}</h3>
                                    </div>
                                    <div class="card-body ">

                                        <p>Appointment Date : {{this.dateOfBooking}}</p>
                                        <p>Appointment Time : {{this.timeOfBooking}}</p>
                                        <p>Booking For : {{this.displayName}}</p>
                                        {{!-- <button type="button" class="  mt-3 mb-3 p-2"
                                            style="background-color:  #3efc8a; color: white;  border-radius: 30px; border: 1px;">Make
                                            an Appointment</button> --}}
                                    </div>

                                    <div class="card-footer">
                                        <p class="float-left">cancelled</p>
                                        <a class="float-right" href="/make-appointment/{{this.dr_id}}"
                                            onclick="retryAppointments('{{this._id}}')">Retry Booking</a>
                                    </div>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>

                </div>
            </div>
            <div class="tabcontent" id="Results">

                <div class="row">

                    {{#each prescriptions}}
                    <div class="col-md-4">
                        <div class="card border-info  mb-3 mt-4  " style="border-radius: 10px; width:max-content;">
                            <div class="card-header ">
                                <img class=" float-left rounded-circle  border card-image "
                                    style="height: 80px; width: 80px;" src="/doctor-images/{{this.drId}}.jpg" alt="">
                                <h3 class="float-right mt-4 ml-1">{{this.drName}}</h3>
                            </div>
                            <div class="card-body ">
                                <p> <strong>Date of Appointment :</strong> {{dateOfBooking}}</p>
                                <p><strong>Session of Appointment :</strong></p>
                                <strong> Medicines :</strong>
                                {{#each this.userPrescription}}
                                <li class="ml-5">{{this}}</li>
                                {{/each}}
                                <p><strong>Notes :</strong>{{this.userNotes}}</p>
                            </div>





                        </div>
                    </div>
                    {{/each}}
                </div>
                <div class="mb-3 mt-3 row">

                    <button class="excel-export ml-auto mr-5" style="color: green;"
                        onclick="excelExport('{{user._id}}')">
                        Create Excelsheet
                    </button>
                </div>

            </div>


        </div>
    </div>
</section>



<script>
    window.onload = function () {
        startTab();
    };

    function startTab() {
        document.getElementById("defaultOpen").click();

    }

    function user(evt, evtName) {
        // Declare all variables
        var i, tabcontent, tablinks;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(evtName).style.display = "block";
        evt.currentTarget.className += " active";
    }
    function canceledAppointments(appointmentId) {
        if (confirm('Are you sure you want to cancel this?')) {
            $.ajax({
                url: '/cancelled-appointments',
                data: {
                    appointment: appointmentId,

                },
                method: 'post',
                success: (response) => {

                    window.location.reload()
                }

            })
        }
    }
    const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
    const EXCEL_EXTENSION = '.xlsx';


    function excelExport(userId) {

        $.ajax({
            url: '/export-to-excel',
            data: {
                user: userId,
            },

            method: 'post',
            success: (response) => {
                console.log("Called ajax to export excel and recived success response...Creaing excel sheet..")

                let el;
                for (el = 0; el < response.length; el++) {
                    const arrayItem = response[el];
                    const userPrescription = arrayItem.userPrescription
                    //var curr = arrayItem;
                    let ind;
                    for (ind = 0; ind < userPrescription.length; ind++) {
                        var key = "presecrption " + (ind + 1);
                        response[el][key] = userPrescription[ind]
                    }
                    delete response[el]["userPrescription"];
                    delete response[el]["_id"];
                    delete response[el]["drId"];
                    delete response[el]["appointmentId"];
                    delete response[el]["userId"];
                    delete response[el]["submit"];
                }

                const worksheet = XLSX.utils.json_to_sheet(response);
                const workbook = {
                    Sheets: {
                        'response': worksheet
                    },
                    SheetNames: ['response']
                }
                const excelBuffer = XLSX.write(workbook, { booktype: 'xlsx', type: 'array' })
                console.log(excelBuffer)
                saveAsExcel(excelBuffer, 'myFile')

            }
        })

    }
    function saveAsExcel(buffer, filename) {
        const data = new Blob([buffer], { type: EXCEL_TYPE });
        saveAs(data, filename + '_export_' + new Date().getTime() + EXCEL_EXTENSION)
    }

</script>
<script>
    /*
* FileSaver.js
* A saveAs() FileSaver implementation.
*
* By Eli Grey, http://eligrey.com
*
* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)
* source  : http://purl.eligrey.com/github/FileSaver.js
*/

    // The one and only way of getting global scope in all environments
    // https://stackoverflow.com/q/3277182/1008999
    var _global = typeof window === 'object' && window.window === window
        ? window : typeof self === 'object' && self.self === self
            ? self : typeof global === 'object' && global.global === global
                ? global
                : this

    function bom(blob, opts) {
        if (typeof opts === 'undefined') opts = { autoBom: false }
        else if (typeof opts !== 'object') {
            console.warn('Deprecated: Expected third argument to be a object')
            opts = { autoBom: !opts }
        }

        // prepend BOM for UTF-8 XML and text/* types (including HTML)
        // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
        if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
            return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })
        }
        return blob
    }

    function download(url, name, opts) {
        var xhr = new XMLHttpRequest()
        xhr.open('GET', url)
        xhr.responseType = 'blob'
        xhr.onload = function () {
            saveAs(xhr.response, name, opts)
        }
        xhr.onerror = function () {
            console.error('could not download file')
        }
        xhr.send()
    }

    function corsEnabled(url) {
        var xhr = new XMLHttpRequest()
        // use sync to avoid popup blocker
        xhr.open('HEAD', url, false)
        try {
            xhr.send()
        } catch (e) { }
        return xhr.status >= 200 && xhr.status <= 299
    }

    // `a.click()` doesn't work for all browsers (#465)
    function click(node) {
        try {
            node.dispatchEvent(new MouseEvent('click'))
        } catch (e) {
            var evt = document.createEvent('MouseEvents')
            evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,
                20, false, false, false, false, 0, null)
            node.dispatchEvent(evt)
        }
    }

    // Detect WebView inside a native macOS app by ruling out all browsers
    // We just need to check for 'Safari' because all other browsers (besides Firefox) include that too
    // https://www.whatismybrowser.com/guides/the-latest-user-agent/macos
    var isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)

    var saveAs = _global.saveAs || (
        // probably in some web worker
        (typeof window !== 'object' || window !== _global)
            ? function saveAs() { /* noop */ }

            // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView
            : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)
                ? function saveAs(blob, name, opts) {
                    var URL = _global.URL || _global.webkitURL
                    var a = document.createElement('a')
                    name = name || blob.name || 'download'

                    a.download = name
                    a.rel = 'noopener' // tabnabbing

                    // TODO: detect chrome extensions & packaged apps
                    // a.target = '_blank'

                    if (typeof blob === 'string') {
                        // Support regular links
                        a.href = blob
                        if (a.origin !== location.origin) {
                            corsEnabled(a.href)
                                ? download(blob, name, opts)
                                : click(a, a.target = '_blank')
                        } else {
                            click(a)
                        }
                    } else {
                        // Support blobs
                        a.href = URL.createObjectURL(blob)
                        setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s
                        setTimeout(function () { click(a) }, 0)
                    }
                }

                // Use msSaveOrOpenBlob as a second approach
                : 'msSaveOrOpenBlob' in navigator
                    ? function saveAs(blob, name, opts) {
                        name = name || blob.name || 'download'

                        if (typeof blob === 'string') {
                            if (corsEnabled(blob)) {
                                download(blob, name, opts)
                            } else {
                                var a = document.createElement('a')
                                a.href = blob
                                a.target = '_blank'
                                setTimeout(function () { click(a) })
                            }
                        } else {
                            navigator.msSaveOrOpenBlob(bom(blob, opts), name)
                        }
                    }

                    // Fallback to using FileReader and a popup
                    : function saveAs(blob, name, opts, popup) {
                        // Open a popup immediately do go around popup blocker
                        // Mostly only available on user interaction and the fileReader is async so...
                        popup = popup || open('', '_blank')
                        if (popup) {
                            popup.document.title =
                                popup.document.body.innerText = 'downloading...'
                        }

                        if (typeof blob === 'string') return download(blob, name, opts)

                        var force = blob.type === 'application/octet-stream'
                        var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari
                        var isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent)

                        if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {
                            // Safari doesn't allow downloading of blob URLs
                            var reader = new FileReader()
                            reader.onloadend = function () {
                                var url = reader.result
                                url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')
                                if (popup) popup.location.href = url
                                else location = url
                                popup = null // reverse-tabnabbing #460
                            }
                            reader.readAsDataURL(blob)
                        } else {
                            var URL = _global.URL || _global.webkitURL
                            var url = URL.createObjectURL(blob)
                            if (popup) popup.location = url
                            else location.href = url
                            popup = null // reverse-tabnabbing #460
                            setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s
                        }
                    }
    )

    _global.saveAs = saveAs.saveAs = saveAs

    if (typeof module !== 'undefined') {
        module.exports = saveAs;
    }

</script>